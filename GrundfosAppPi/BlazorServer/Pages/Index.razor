@page "/"

<h1>Dashboard</h1>
<br>
<div class="width60">
    <div class="optionboxes">
        <div id="status-image" class="mat-layout-grid-cell">
            <p>MAGNA3</p>
            <image class="image" src="images/pumpe.png"></image>
        </div>
        <div id="status-image" class="mat-layout-grid-cell">
            <p>No warning/alarm</p>
            <image class="image" src="images/green_circle.png"></image>
        </div>
        <div id="status-image" class="mat-layout-grid-cell">

            @if (PumpInfo != null)
            {
            <div class="PumpInfoDisplay">
                <h6>@PumpInfo.Name</h6>
                <br>
                <p>Speed: @PumpInfo.Speed rpm</p>
                <p>Frequence: @PumpInfo.Frequence Hz</p>
                <p>PowerUsage: @PumpInfo.PowerUsage kWh</p>
                <p>Flow: @PumpInfo.Flow m3/h</p>
            </div>
            }
        </div>
    </div>
</div>

<br>
<br>
<MatButton Unelevated="true" Icon="settings_remote" Id="first-row-button">Control Mode</MatButton>
<MatButton Unelevated="true" Icon="settings_remote" Id="first-row-button">Operating Mode</MatButton>
<MatButton Unelevated="true" Icon="control_point" Id="first-row-button">Setpoint</MatButton>
<MatButton Unelevated="true" Icon="clear" Id="first-row-button">Stop</MatButton>
<br>
<br>
<MatButton Unelevated="true" Id="second-row-button">Status</MatButton>
<MatButton Unelevated="true" Id="second-row-button">Settings</MatButton>
<MatButton Unelevated="true" Id="second-row-button">Scheduling (Enabled)</MatButton>
<MatButton Unelevated="true" Id="second-row-button">Alarms and warnings</MatButton>
<MatButton Unelevated="true" Id="second-row-button">Assist</MatButton>

@*<button @onclick="Test">Clic me</button>*@

@code {
    IOTReceiver receiver = new IOTReceiver();

    public PumpInfo PumpInfo { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        receiver.MessageReceived += MessageReceivedEventHandler;
        receiver.StartReceieveMessagesFromDevice();
        //receiver.MessageReceived += (o, e) => GetNewMessagesFromReceiver();
    }

    void MessageReceivedEventHandler(object sender, EventArgs e)
    {
        GetNewMessagesFromReceiver();
    }

    void GetNewMessagesFromReceiver()
    {
        PumpInfo = receiver.ConsumeMessage();
        StateHasChanged();
        //List<PumpInfo> ListOfPumpInfo = await receiver.StartReceieveMessagesFromDevice();

        //if (PumpInfo == null)
        //{
        //    PumpInfo = ListOfPumpInfo[0];
        //}
        //else
        //{
        //    PumpInfo? updatedPump = ListOfPumpInfo.Where<PumpInfo>(a => a.Name == PumpInfo.Name).First();

        //    if (updatedPump != null)
        //    {
        //        PumpInfo = updatedPump;
        //    }
        //}



        //StateHasChanged();
    }

}